package main.freecell.move;

import main.freecell.Solitaire;
import main.freecell.util.CardHolder;

/**
 * A MoveComponent represents a place on the board where a card
 * can be removed, and/or inserted into it (freecells, stacks, foundations).
 * The type of the component is only used to generate the logged move in the output file,
 * and to limit the moves generated by the {@link main.ai.util.MoveGenerator#generateMoves(Solitaire)} method.
 */
public enum MoveComponent {

    FOUNDATION_1(ComponentType.FOUNDATION),
    FOUNDATION_2(ComponentType.FOUNDATION),
    FOUNDATION_3(ComponentType.FOUNDATION),
    FOUNDATION_4(ComponentType.FOUNDATION),

    STACK_1(ComponentType.STACK),
    STACK_2(ComponentType.STACK),
    STACK_3(ComponentType.STACK),
    STACK_4(ComponentType.STACK),
    STACK_5(ComponentType.STACK),
    STACK_6(ComponentType.STACK),
    STACK_7(ComponentType.STACK),
    STACK_8(ComponentType.STACK),

    FREECELL_1(ComponentType.FREECELL),
    FREECELL_2(ComponentType.FREECELL),
    FREECELL_3(ComponentType.FREECELL),
    FREECELL_4(ComponentType.FREECELL);

    public enum ComponentType {
        FREECELL, STACK, FOUNDATION
    }

    private final ComponentType type;

    MoveComponent(ComponentType type) {
        this.type = type;
    }

    public ComponentType getType() {
        return type;
    }

    public CardHolder get(Solitaire instance) {
        switch (this) {
            case STACK_1:
                return instance.getStacks()[0];
            case STACK_2:
                return instance.getStacks()[1];
            case STACK_3:
                return instance.getStacks()[2];
            case STACK_4:
                return instance.getStacks()[3];
            case STACK_5:
                return instance.getStacks()[4];
            case STACK_6:
                return instance.getStacks()[5];
            case STACK_7:
                return instance.getStacks()[6];
            case STACK_8:
                return instance.getStacks()[7];
            case FREECELL_1:
                return instance.getFreecells()[0];
            case FREECELL_2:
                return instance.getFreecells()[1];
            case FREECELL_3:
                return instance.getFreecells()[2];
            case FREECELL_4:
                return instance.getFreecells()[3];
            case FOUNDATION_1:
                return instance.getFoundations()[0];
            case FOUNDATION_2:
                return instance.getFoundations()[1];
            case FOUNDATION_3:
                return instance.getFoundations()[2];
            case FOUNDATION_4:
                return instance.getFoundations()[3];
            default:
                return null;
        }
    }

}
